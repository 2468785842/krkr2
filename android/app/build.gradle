plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    ndkVersion '27.2.12479018'
    compileSdk PROP_COMPILE_SDK_VERSION.toInteger()
    namespace 'org.github.krkr2'

    defaultConfig {
        applicationId 'org.github.krkr2'
        minSdkVersion PROP_MIN_SDK_VERSION
        targetSdkVersion PROP_TARGET_SDK_VERSION

        ndk {
            jobs Runtime.runtime.availableProcessors()
            //noinspection ChromeOsAbiSupport
            abiFilters 'arm64-v8a' //, 'armeabi-v7a'
        }

        externalNativeBuild {
            cmake {
                targets 'krkr2'
                cppFlags '-fsigned-char'
            }
        }
        versionCode Integer.parseInt(new Date().format('yyyyMMddHH'))
        versionName '1.4.0'
    }

    externalNativeBuild {
        cmake {
            buildStagingDirectory '../../out/cmake-build-android'
            path '../../CMakeLists.txt'
        }
    }

    signingConfigs {
        release {
            storeFile file('sign.keystore')
            def signPropsFile = file('sign.properties')
            Properties signProps = new Properties()
            signProps.load(new FileInputStream(signPropsFile))
            keyAlias signProps['SIGN_KEY_ALIAS']
            keyPassword signProps['SIGN_KEY_PASS']
            storePassword signProps['SIGN_STORE_PASS']
        }
    }

    buildTypes {
        release {
            externalNativeBuild {
                cmake {
                    arguments "-DCMAKE_BUILD_TYPE=Release"
                }
            }

            // OpenCV 并行加速需要openML, 这里解压so文件不然找不到
            packagingOptions {
                jniLibs {
                    useLegacyPackaging = true
                }
            }

            debuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        debug {
            externalNativeBuild {
                cmake {
                    arguments "-DCMAKE_BUILD_TYPE=Debug"
                }
            }
            debuggable true
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['java']
            res.srcDirs = ['res']
//            jniLibs.srcDirs = ['jniLibs']
            assets.srcDirs = ['../../ui/cocos-studio']
        }

    }

    kotlinOptions {
        jvmTarget = "17"
    }

    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.8"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    splits {
        abi {
            enable = true           // 启用 ABI 分包
            reset()               // 清除默认支持的 ABI
            //noinspection ChromeOsAbiSupport
            include 'arm64-v8a' // 'armeabi-v7a', 'x86', 'x86_64' // 指定支持的 ABI
            universalApk = true
        }
    }

    applicationVariants.configureEach { variant ->
        variant.outputs.configureEach {
            def ver = defaultConfig.versionName
            def abi = filters.find { it.filterType == "ABI" }?.identifier ?: "all"
            outputFileName = "${rootProject.name}-$ver-${abi}.apk"
        }
    }
}

dependencies {
    //implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':cocos2dx')

    implementation 'com.google.android.material:material:1.12.0'

    implementation 'androidx.activity:activity-ktx:1.9.3'
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'androidx.fragment:fragment-ktx:1.8.5'

    //noinspection GradleDependency
    implementation 'androidx.core:core-ktx:1.13.1'

    configurations.configureEach {
        resolutionStrategy {
            force 'org.jetbrains.kotlin:kotlin-stdlib:1.8.22'
            force 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.22'
        }
    }
}
