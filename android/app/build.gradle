plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    compileSdk PROP_COMPILE_SDK_VERSION.toInteger()
    namespace 'org.github.krkr2'

    defaultConfig {
        applicationId 'org.github.krkr2'
        minSdkVersion PROP_MIN_SDK_VERSION
        targetSdkVersion PROP_TARGET_SDK_VERSION

        versionCode Integer.parseInt(new Date().format('yyyyMMddHH'))
        versionName '1.4.4'
    }

    signingConfigs {
        release {
            storeFile file('sign.keystore')
            def signPropsFile = file('sign.properties')
            if (signPropsFile.exists()) {
                Properties signProps = new Properties()
                signProps.load(new FileInputStream(signPropsFile))
                keyAlias signProps['SIGN_KEY_ALIAS']
                keyPassword signProps['SIGN_KEY_PASS']
                storePassword signProps['SIGN_STORE_PASS']
            } else {
                keyAlias System.getenv('SIGN_KEY_ALIAS')
                keyPassword System.getenv('SIGN_KEY_PASS')
                storePassword System.getenv('SIGN_STORE_PASS')
            }
        }
    }

    buildTypes {
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        debug {
            debuggable true
            signingConfig signingConfigs.release
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['java']
            res.srcDirs = ['res']
            jniLibs.srcDirs = ['jniLibs']
            assets.srcDirs = ['../assets']
        }

    }

    kotlinOptions {
        jvmTarget = "17"
    }

    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.15"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    splits {
        abi {
            enable = true           // 启用 ABI 分包
            reset()               // 清除默认支持的 ABI
            //noinspection ChromeOsAbiSupport
            include 'armeabi-v7a', 'arm64-v8a' //, 'x86', 'x86_64' // 指定支持的 ABI
            universalApk = true
        }
    }

    applicationVariants.configureEach { variant ->
        variant.outputs.configureEach {
            def ver = defaultConfig.versionName
            def abi = filters.find { it.filterType == "ABI" }?.identifier ?: "all"
            outputFileName = "${rootProject.name}-$ver-${abi}.apk"
        }
    }
}

dependencies {
    //implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':cocos2dx')
    //noinspection GradleDependency
    implementation 'androidx.appcompat:appcompat:1.6.1'
    //noinspection GradleDependency
    implementation 'androidx.activity:activity-ktx:1.9.3'
    //noinspection GradleDependency
    implementation 'androidx.fragment:fragment-ktx:1.8.5'

    //noinspection GradleDependency
    implementation 'androidx.core:core-ktx:1.13.1'
}
