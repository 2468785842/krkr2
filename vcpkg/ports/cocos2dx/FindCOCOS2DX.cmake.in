include(FindPackageHandleStandardArgs)
include(SelectLibraryConfigurations)
include(CMakeFindDependencyMacro)

if(NOT COCOS2DX_FOUND)

    # Compute the installation path relative to this file.
    get_filename_component(SEARCH_PATH "${CMAKE_CURRENT_LIST_FILE}" PATH)
    get_filename_component(SEARCH_PATH "${SEARCH_PATH}" PATH)
    get_filename_component(SEARCH_PATH "${SEARCH_PATH}" PATH)
    if(SEARCH_PATH STREQUAL "/")
        set(SEARCH_PATH "")
    endif()

    set(COCOS2DX_VERSION "@COCOS2DX_VERSION@")

    macro(COCOS2DX_FIND)
        cmake_parse_arguments(arg
            "" "varname;headerdir" ""
            ${ARGN}
        )
        if(NOT COCOS2DX_${arg_varname}_INCLUDE_DIRS)
            if(arg_headerdir)
                set(COCOS2DX_${arg_varname}_INCLUDE_DIRS ${SEARCH_PATH}/include/${arg_headerdir})
            endif()
        endif()
        if(NOT COCOS2DX_${arg_varname}_LIBRARY)
            find_library(COCOS2DX_${arg_varname}_LIBRARY_RELEASE NAMES ${arg_varname} PATHS ${SEARCH_PATH}/lib/ NO_DEFAULT_PATH)
            find_library(COCOS2DX_${arg_varname}_LIBRARY_DEBUG NAMES ${arg_varname}d ${arg_varname} PATHS ${SEARCH_PATH}/debug/lib/ NO_DEFAULT_PATH)
            get_filename_component(COCOS2DX_${arg_varname}_LIBRARY_RELEASE_DIR ${COCOS2DX_${arg_varname}_LIBRARY_RELEASE} DIRECTORY)
            get_filename_component(COCOS2DX_${arg_varname}_LIBRARY_DEBUG_DIR ${COCOS2DX_${arg_varname}_LIBRARY_DEBUG} DIRECTORY)
            select_library_configurations(COCOS2DX_${arg_varname})
            set(COCOS2DX_${arg_varname}_LIBRARY ${COCOS2DX_${arg_varname}_LIBRARY} CACHE STRING "")
        endif()
        if (COCOS2DX_${arg_varname}_LIBRARY)
            set(COCOS2DX_${arg_varname}_FOUND TRUE BOOL)
            list(APPEND COCOS2DX_INCLUDE_DIRS ${COCOS2DX_${arg_varname}_INCLUDE_DIRS})
            list(APPEND COCOS2DX_LIBRARIES ${COCOS2DX_${arg_varname}_LIBRARY})
            list(APPEND COCOS2DX_LIBRARY_DIRS ${COCOS2DX_${arg_varname}_LIBRARY_RELEASE_DIR} ${COCOS2DX_${arg_varname}_LIBRARY_DEBUG_DIR})
        endif()
    endmacro(COCOS2DX_FIND)

    COCOS2DX_FIND(varname cocos2d headerdir cocos)
    COCOS2DX_FIND(varname external) 
    COCOS2DX_FIND(varname ext_unzip headerdir unzip)
    COCOS2DX_FIND(varname ext_tinyxml2 headerdir tinyxml2)
    COCOS2DX_FIND(varname ext_xxhash headerdir xxhash)
    COCOS2DX_FIND(varname ext_edtaa3func headerdir edtaa3func)
    COCOS2DX_FIND(varname ext_poly2tri headerdir poly2tri)
    COCOS2DX_FIND(varname ext_recast headerdir recast)
    COCOS2DX_FIND(varname ext_clipper headerdir clipper)
    COCOS2DX_FIND(varname ext_convertUTF headerdir ConvertUTF)
    COCOS2DX_FIND(varname ext_pvmp3dec headerdir android-specific/pvmp3dec)
    COCOS2DX_FIND(varname ext_md5 headerdir md5)

    if (COCOS2DX_cocos2d_FOUND)
        list(REMOVE_DUPLICATES COCOS2DX_INCLUDE_DIRS)
        list(REMOVE_DUPLICATES COCOS2DX_LIBRARY_DIRS)
        
        set(COCOS2DX_LIBRARY ${COCOS2DX_LIBRARIES})

        set(COCOS2DX_FOUND TRUE CACHE BOOL "")
        set(COCOS2DX_LIBRARIES ${COCOS2DX_LIBRARIES} CACHE STRING "")
        set(COCOS2DX_INCLUDE_DIRS ${COCOS2DX_INCLUDE_DIRS} CACHE STRING "")
        set(COCOS2DX_LIBRARY_DIRS ${COCOS2DX_LIBRARY_DIRS} CACHE STRING "")
    endif()
    set(COCOS2DX_SOURCE_DIR "@SOURCE_PATH@" CACHE STRING "")
    
    find_package_handle_standard_args(COCOS2DX REQUIRED_VARS COCOS2DX_SOURCE_DIR COCOS2DX_LIBRARIES COCOS2DX_LIBRARY_DIRS COCOS2DX_INCLUDE_DIRS)

endif()

