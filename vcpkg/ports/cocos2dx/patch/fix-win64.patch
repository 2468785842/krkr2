diff --git a/cocos/ui/UIEditBox/UIEditBoxImpl-win32.cpp b/cocos/ui/UIEditBox/UIEditBoxImpl-win32.cpp
index b873875..28cb513 100644
--- a/cocos/ui/UIEditBox/UIEditBoxImpl-win32.cpp
+++ b/cocos/ui/UIEditBox/UIEditBoxImpl-win32.cpp
@@ -54,14 +54,14 @@ namespace ui {
     void EditBoxImplWin::lazyInit()
     {
         s_hwndCocos = cocos2d::Director::getInstance()->getOpenGLView()->getWin32Window();
-        LONG style = ::GetWindowLongW(s_hwndCocos, GWL_STYLE);
-        ::SetWindowLongW(s_hwndCocos, GWL_STYLE, style | WS_CLIPCHILDREN);
+        LONG style = ::GetWindowLongPtrW(s_hwndCocos, GWL_STYLE);
+        ::SetWindowLongPtrW(s_hwndCocos, GWL_STYLE, style | WS_CLIPCHILDREN);
         s_isInitialized = true;
         s_previousFocusWnd = s_hwndCocos;
 
         s_hInstance = ::GetModuleHandleW(nullptr);
 
-        s_prevCocosWndProc = (WNDPROC)SetWindowLongPtrW(s_hwndCocos, GWL_WNDPROC, (LONG_PTR)hookGLFWWindowProc);
+        s_prevCocosWndProc = (WNDPROC)SetWindowLongPtrW(s_hwndCocos, GWLP_WNDPROC, (LONG_PTR)hookGLFWWindowProc);
     }
 
     EditBoxImpl* __createSystemEditBox(EditBox* pEditBox)
@@ -98,7 +98,7 @@ namespace ui {
     {
         if (_hwndEdit)
         {
-            SetWindowLongPtrW(_hwndEdit, GWL_WNDPROC, (LONG_PTR)_prevWndProc);
+            SetWindowLongPtrW(_hwndEdit, GWLP_WNDPROC, (LONG_PTR)_prevWndProc);
             ::DestroyWindow(_hwndEdit);
             _hasFocus = false;
             _changedTextManually = false;
@@ -125,8 +125,8 @@ namespace ui {
                 s_hInstance,
                 this);        // pointer not needed 
 
-            SetWindowLongPtrW(_hwndEdit, GWL_USERDATA, (LONG_PTR)this);
-            _prevWndProc = (WNDPROC)SetWindowLongPtrW(_hwndEdit, GWL_WNDPROC, (LONG_PTR)WindowProc);
+            SetWindowLongPtrW(_hwndEdit, GWLP_USERDATA, (LONG_PTR)this);
+            _prevWndProc = (WNDPROC)SetWindowLongPtrW(_hwndEdit, GWLP_WNDPROC, (LONG_PTR)WindowProc);
 
             ::SendMessageW(_hwndEdit, EM_LIMITTEXT, this->_maxLength, 0);
             s_previousFocusWnd = s_hwndCocos;
@@ -179,7 +179,7 @@ namespace ui {
             || _editBoxInputMode == cocos2d::ui::EditBox::InputMode::PHONE_NUMBER)
         {
             this->createEditCtrl(true);
-            ::SetWindowLongW(_hwndEdit, GWL_STYLE, ::GetWindowLongW(_hwndEdit, GWL_STYLE) | ES_NUMBER);
+            ::SetWindowLongPtrW(_hwndEdit, GWL_STYLE, ::GetWindowLongPtrW(_hwndEdit, GWL_STYLE) | ES_NUMBER);
         }
         else
         {
@@ -205,7 +205,7 @@ namespace ui {
 
                 if (inputFlag == EditBox::InputFlag::INITIAL_CAPS_ALL_CHARACTERS)
                 {
-                    ::SetWindowLongW(_hwndEdit, GWL_STYLE, ::GetWindowLongW(_hwndEdit, GWL_STYLE) | ES_UPPERCASE);
+                    ::SetWindowLongPtrW(_hwndEdit, GWL_STYLE, ::GetWindowLongPtrW(_hwndEdit, GWL_STYLE) | ES_UPPERCASE);
                 }
                 // Clear the password style
                 ::PostMessageW(_hwndEdit, EM_SETPASSWORDCHAR, (WPARAM)0, (LPARAM)0);
@@ -220,7 +220,7 @@ namespace ui {
 
     void EditBoxImplWin::setNativeTextHorizontalAlignment(TextHAlignment alignment)
     {
-        LONG style = ::GetWindowLongW(_hwndEdit, GWL_STYLE);
+        LONG style = ::GetWindowLongPtrW(_hwndEdit, GWL_STYLE);
         switch (alignment)
         {
         case TextHAlignment::LEFT:
@@ -233,7 +233,7 @@ namespace ui {
             style = (style & ~ES_LEFT & ~ES_CENTER) | ES_RIGHT;
             break;
         }
-        ::SetWindowLongW(_hwndEdit, GWL_STYLE, style);
+        ::SetWindowLongPtrW(_hwndEdit, GWL_STYLE, style);
     }
 
     void EditBoxImplWin::setNativeText(const char* pText)
diff --git a/templates/lua-template-default/frameworks/runtime-src/proj.win32/SimulatorWin.cpp b/templates/lua-template-default/frameworks/runtime-src/proj.win32/SimulatorWin.cpp
index c1514e7..3861bdf 100644
--- a/templates/lua-template-default/frameworks/runtime-src/proj.win32/SimulatorWin.cpp
+++ b/templates/lua-template-default/frameworks/runtime-src/proj.win32/SimulatorWin.cpp
@@ -395,7 +395,7 @@ int SimulatorWin::run()
     _project.dump();
     auto app = Application::getInstance();
 
-    g_oldWindowProc = (WNDPROC)SetWindowLong(_hwnd, GWL_WNDPROC, (LONG)SimulatorWin::windowProc);
+    g_oldWindowProc = (WNDPROC)SetWindowLongPtr(_hwnd, GWLP_WNDPROC, (LONG)SimulatorWin::windowProc);
 
     // startup message loop
     return app->run();
