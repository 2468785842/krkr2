diff --git a/src/bitmap-private.h b/src/bitmap-private.h
index ac4d05c..02b8715 100644
--- a/src/bitmap-private.h
+++ b/src/bitmap-private.h
@@ -157,7 +157,7 @@ void gdip_process_bitmap_attributes (GpBitmap *bitmap, void **dest, GpImageAttri
 ColorPalette* gdip_create_greyscale_palette (int num_colors) GDIP_INTERNAL;
 
 typedef struct {
-	Rect		region;
+	GpRect		region;
 	int		x, y;			/* the offset of the next byte that will be loaded, once the buffer is depleted */
 	unsigned short	buffer;
 	int		p;			/* index of pixel within 'buffer' that was returned by the last call to gdip_pixel_stream_get_next () */
diff --git a/src/bitmap.c b/src/bitmap.c
index ada444b..5148df6 100644
--- a/src/bitmap.c
+++ b/src/bitmap.c
@@ -31,7 +31,7 @@
 #include "bitmap-private.h"
 
 
-static GpStatus gdip_bitmap_clone_data_rect (BitmapData *srcData, Rect *srcRect, BitmapData *destData, Rect *destRect);
+static GpStatus gdip_bitmap_clone_data_rect (BitmapData *srcData,GpRect *srcRect, BitmapData *destData, GpRect *destRect);
 
 
 /* The default indexed palettes. This code was generated by a tiny C# program.
@@ -1065,8 +1065,8 @@ GdipCloneBitmapAreaI (INT x, INT y, INT width, INT height, PixelFormat format,
 					  GpBitmap *original, GpBitmap **bitmap)
 {
 	GpBitmap	*result;
-	Rect		sr = { x, y, width, height };
-	Rect		dr = { 0, 0, width, height };
+	GpRect		sr = { x, y, width, height };
+	GpRect		dr = { 0, 0, width, height };
 	GpStatus	status;
 
 	if ((original == NULL) || (bitmap == NULL) || (original->active_bitmap == NULL)) {
@@ -1130,7 +1130,7 @@ gdip_copy_strides (BYTE *dst, int dstStride, BYTE *src, int srcStride, int realB
  * bits must be of the same PixelFormat.
  */
 static GpStatus
-gdip_bitmap_clone_data_rect (BitmapData *srcData, Rect *srcRect, BitmapData *destData, Rect *destRect)
+gdip_bitmap_clone_data_rect (BitmapData *srcData, GpRect *srcRect, BitmapData *destData, GpRect *destRect)
 {
 	int dest_components;
 	int dest_depth; 
@@ -1800,13 +1800,13 @@ gdip_pixel_stream_copy_optimized (StreamingState *dst_state, StreamingState *src
  *	- the pixel format conversion has already been validated.
  */
 static GpStatus
-gdip_bitmap_change_rect_pixel_format (BitmapData *srcData, Rect *srcRect, BitmapData *destData, Rect *destRect)
+gdip_bitmap_change_rect_pixel_format (BitmapData *srcData, GpRect *srcRect, BitmapData *destData, GpRect *destRect)
 {
 	PixelFormat	srcFormat;
 	PixelFormat	destFormat;
 	StreamingState	srcStream;
 	StreamingState	destStream;
-	Rect		effectiveDestRect;
+	GpRect		effectiveDestRect;
 	GpStatus	status;
 
 	srcFormat = srcData->pixel_format;
@@ -1885,7 +1885,7 @@ gdip_is_a_32bit_pixelformat (PixelFormat format)
 }
 
 BOOL
-gdip_can_window_without_copy (BitmapData *data, Rect *rect, int format)
+gdip_can_window_without_copy (BitmapData *data, GpRect *rect, int format)
 {
 	int bpp = gdip_get_pixel_format_bpp (format);
 
@@ -1951,13 +1951,13 @@ gdip_make_alpha_opaque (BitmapData *data)
 #endif
 
 GpStatus WINGDIPAPI
-GdipBitmapLockBits (GpBitmap *bitmap, GDIPCONST Rect *srcRect, UINT flags, PixelFormat format, BitmapData *locked_data)
+GdipBitmapLockBits (GpBitmap *bitmap, GDIPCONST GpRect *srcRect, UINT flags, PixelFormat format, BitmapData *locked_data)
 {
 	int		dest_pixel_format_bpp;
 	int		dest_stride;
 	int		dest_size;
 	BYTE		*dest_scan0;
-	Rect		destRect;
+	GpRect		destRect;
 	GpStatus	status;
 	BitmapData	*root_data;
 
@@ -2081,8 +2081,8 @@ GdipBitmapUnlockBits (GpBitmap *bitmap, BitmapData *locked_data)
 
 	/* We need to copy the locked data back to the root data's Scan0 if the image was writeable */
 	if ((locked_data->reserved & GBD_WRITE_OK) != 0) {
-		Rect srcRect = { 0, 0, locked_data->width, locked_data->height };
-		Rect destRect = { locked_data->x, locked_data->y, locked_data->width, locked_data->height };
+		GpRect srcRect = { 0, 0, locked_data->width, locked_data->height };
+		GpRect destRect = { locked_data->x, locked_data->y, locked_data->width, locked_data->height };
 
 		status = gdip_bitmap_change_rect_pixel_format (locked_data, &srcRect, root_data, &destRect);
 	} else {
diff --git a/src/bitmap.h b/src/bitmap.h
index d4a6b94..0527eb6 100644
--- a/src/bitmap.h
+++ b/src/bitmap.h
@@ -45,7 +45,7 @@ GpStatus WINGDIPAPI GdipCreateHICONFromBitmap (GpBitmap* bitmap, HICON *hbmRetur
 
 GpStatus WINGDIPAPI GdipCreateBitmapFromResource (HINSTANCE hInstance, GDIPCONST WCHAR *lpBitmapName, GpBitmap** bitmap);
 
-GpStatus WINGDIPAPI GdipBitmapLockBits (GpBitmap *bitmap, GDIPCONST Rect *rect, UINT flags, PixelFormat format, BitmapData *lockedBitmapData);
+GpStatus WINGDIPAPI GdipBitmapLockBits (GpBitmap *bitmap, GDIPCONST GpRect *rect, UINT flags, PixelFormat format, BitmapData *lockedBitmapData);
 GpStatus WINGDIPAPI GdipBitmapUnlockBits (GpBitmap *bitmap, BitmapData *lockedBitmapData);
 
 GpStatus WINGDIPAPI GdipBitmapSetPixel (GpBitmap *bitmap, INT x, INT y, ARGB color);
diff --git a/src/gdipstructs.h b/src/gdipstructs.h
index a5a1755..6e451d6 100644
--- a/src/gdipstructs.h
+++ b/src/gdipstructs.h
@@ -61,9 +61,6 @@ typedef struct {
 	ARGB Entries[1];
 } ColorPalette;
 
-typedef struct {
-        int X, Y;
-} Point, GpPoint;
 
 typedef struct {
         float X, Y;
@@ -82,13 +79,31 @@ typedef struct {
 	VOID*	value;
 } PropertyItem;
 
+typedef struct {
+	float X, Y, Width, Height;
+} RectF, GpRectF;
+
+
+#if defined(WIN32)
+
+typedef struct {
+        int X, Y;
+} Point, GpPoint;
+
 typedef struct {
 	int X, Y, Width, Height;
 } Rect, GpRect;
 
+#else
 typedef struct {
-	float X, Y, Width, Height;
-} RectF, GpRectF;
+        int X, Y;
+} GpPoint;
+
+typedef struct {
+	int X, Y, Width, Height;
+} GpRect;
+
+#endif
 
 /* Callbacks */
 typedef BOOL (*ImageAbort) (void *);
diff --git a/src/graphics-private.h b/src/graphics-private.h
index c591687..3d5435f 100644
--- a/src/graphics-private.h
+++ b/src/graphics-private.h
@@ -166,30 +166,7 @@ void gdip_cairo_curve_to (GpGraphics *graphics, double x1, double y1, double x2,
 // For the Quartz backend to function we need a few structures and function declarations.
 // Unfortunately including the headers causes conflicts with internal types.  This must
 // be kept in sync with any changes that might happen (albeit unlikely) to apples structures
-struct CGPoint {
-   float x;
-   float y;
-};
-
-typedef struct CGPoint CGPoint;
-
-struct CGSize {
-   float width;
-   float height;
-};
-
-typedef struct CGSize CGSize;
-
-struct CGRect {
-   CGPoint origin;
-   CGSize size;
-};
-
-typedef struct CGRect CGRect;
-
-void *CGBitmapContextCreateImage (void *context);
-void CGContextDrawImage (void *context, CGRect rect, void *image);
-void CGImageRelease (void *image);
+#include <CoreGraphics/CoreGraphics.h>
 void *cairo_quartz_surface_get_cg_context(cairo_surface_t *surface);
 cairo_surface_t *cairo_quartz_surface_create (int format, int width, int height);
 cairo_surface_t *cairo_quartz_surface_create_for_cg_context (void *ctx, int width, int height);
diff --git a/tests/testbits.c b/tests/testbits.c
index bb71e91..583d7d6 100644
--- a/tests/testbits.c
+++ b/tests/testbits.c
@@ -48,7 +48,7 @@ main (int argc, char **argv)
 {
     GpBitmap *bitmap;
     IncompatibleBitmapData d, q;
-    Rect r;
+    GpRect r;
     int i, j;
     unsigned long *lptr;
     unsigned char *cptr;
