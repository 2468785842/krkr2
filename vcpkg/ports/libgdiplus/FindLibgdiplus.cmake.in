include(FindPackageHandleStandardArgs)
include(SelectLibraryConfigurations)
include(CMakeFindDependencyMacro)

if(NOT Libgdiplus_FOUND)

# Compute the installation path relative to this file.
get_filename_component(SEARCH_PATH "${CMAKE_CURRENT_LIST_FILE}" PATH)
get_filename_component(SEARCH_PATH "${SEARCH_PATH}" PATH)
get_filename_component(SEARCH_PATH "${SEARCH_PATH}" PATH)
if(SEARCH_PATH STREQUAL "/")
  set(SEARCH_PATH "")
endif()

set(Libgdiplus_VERSION "@VERSION@")

function(append_dependencies out)
    cmake_parse_arguments(PARSE_ARGV 1 "arg" "DEBUG" "NAMES" "")
    if(${arg_DEBUG})
        set(config DEBUG)
        set(path "${CURRENT_INSTALLED_DIR}/debug/lib/")
    else()
        set(config RELEASE)
        set(path "${CURRENT_INSTALLED_DIR}/lib/")
    endif()
    if("${CMAKE_CXX_IMPLICIT_LINK_LIBRARIES}" STREQUAL "")
        enable_language(CXX)
    endif()
    set(pass_through
        ${CMAKE_CXX_IMPLICIT_LINK_LIBRARIES}
        user32 -pthread -pthreads pthread atomic m
    )
    cmake_policy(SET CMP0057 NEW)
    foreach(lib_name IN LISTS arg_NAMES)
        if(lib_name IN_LIST CMAKE_C_IMPLICIT_LINK_LIBRARIES)
            continue() # implicit even for C
        elseif(lib_name IN_LIST pass_through)
            list(APPEND ${out} "${lib_name}")
        elseif(EXISTS "${lib_name}")
            list(APPEND ${out} "${lib_name}")
        else()
            # first look in ${path} specifically to ensure we find the right release/debug variant
            find_library(Libgdiplus_DEPENDENCY_${lib_name}_${config} NAMES "${lib_name}" PATHS "${path}" NO_DEFAULT_PATH)
            # if not found there, must be a system dependency, so look elsewhere
            find_library(Libgdiplus_DEPENDENCY_${lib_name}_${config} NAMES "${lib_name}" REQUIRED)
            list(APPEND ${out} "${Libgdiplus_DEPENDENCY_${lib_name}_${config}}")
        endif()
    endforeach()
    set("${out}" "${${out}}" PARENT_SCOPE)
endfunction()

if(NOT Libgdiplus_INCLUDE_DIR)
    find_path(Libgdiplus_INCLUDE_DIR NAMES gdip.h PATHS ${SEARCH_PATH}/include/libgdiplus NO_DEFAULT_PATH)
endif()
if(NOT Libgdiplus_LIBRARY)
    find_library(Libgdiplus_LIBRARY_RELEASE NAMES gdiplus PATHS ${SEARCH_PATH}/lib/ NO_DEFAULT_PATH)
    find_library(Libgdiplus_LIBRARY_DEBUG NAMES gdiplusd gdiplus PATHS ${SEARCH_PATH}/debug/lib/ NO_DEFAULT_PATH)
    get_filename_component(Libgdiplus_LIBRARY_RELEASE_DIR ${Libgdiplus_LIBRARY_RELEASE} DIRECTORY)
    get_filename_component(Libgdiplus_LIBRARY_DEBUG_DIR ${Libgdiplus_LIBRARY_DEBUG} DIRECTORY)
    select_library_configurations(Libgdiplus)
    set(Libgdiplus_LIBRARY ${Libgdiplus_LIBRARY} CACHE STRING "")
endif()
if (Libgdiplus_LIBRARY AND Libgdiplus_INCLUDE_DIR)
    set(Libgdiplus_FOUND TRUE BOOL)
    list(APPEND Libgdiplus_INCLUDE_DIRS ${Libgdiplus_INCLUDE_DIR})
    list(APPEND Libgdiplus_LIBRARIES ${Libgdiplus_LIBRARY})
endif()

if (Libgdiplus_FOUND)
  list(REMOVE_DUPLICATES Libgdiplus_INCLUDE_DIRS)
  set(Libgdiplus_VERSION "@VERSION@" CACHE STRING "")

  append_dependencies(Libgdiplus_DEPS_LIBRARY_RELEASE NAMES "@Libgdiplus_DEPENDENCIES_RELEASE@")
  append_dependencies(Libgdiplus_DEPS_LIBRARY_DEBUG   NAMES "@Libgdiplus_DEPENDENCIES_DEBUG@" DEBUG)
  if(Libgdiplus_DEPS_LIBRARY_RELEASE OR Libgdiplus_DEPS_LIBRARY_DEBUG)
    select_library_configurations(Libgdiplus_DEPS)
    list(APPEND Libgdiplus_LIBRARIES ${Libgdiplus_DEPS_LIBRARY})
  endif()

  set(Libgdiplus_LIBRARY ${Libgdiplus_LIBRARIES})

  set(Libgdiplus_FOUND TRUE CACHE BOOL "")
  set(Libgdiplus_LIBRARIES ${Libgdiplus_LIBRARIES} CACHE STRING "")
  set(Libgdiplus_INCLUDE_DIRS ${Libgdiplus_INCLUDE_DIRS} CACHE STRING "")
endif()

find_package_handle_standard_args(Libgdiplus REQUIRED_VARS Libgdiplus_LIBRARIES Libgdiplus_INCLUDE_DIRS)

set(z_vcpkg_using_vcpkg_find_Libgdiplus ${Libgdiplus_FOUND})

endif()